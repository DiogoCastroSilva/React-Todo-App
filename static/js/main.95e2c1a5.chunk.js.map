{"version":3,"sources":["components/Header.js","components/TaskItem.js","components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_React$createElement","text","react_default","a","createElement","onSubmit","addTask","id","type","value","placeholder","defineProperty","taskChange","xmlns","viewBox","className","d","React","Component","TodoItem","_this$props","todos","Tasks","todoItem","completeItem","TaskItem","App","_this","e","preventDefault","newItem","state","currentItem","items","concat","toConsumableArray","console","log","setState","key","localStorage","setItem","JSON","stringify","handleTaskChange","target","Date","now","createTasks","item","onClick","removeTaskOrAddToCompleted","width","height","createCompleted","removeCompleted","filterItems","completed","filter","whatToDo","todo","push","stateItem","getItem","stateJson","parse","map","components_Header","components_Tasks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95e2c1a5.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n    constructor(props) {\n        super();\n    }\n\n\n    render() {\n        const { text } = this.props;\n        return (\n            <header>\n                <form onSubmit={this.props.addTask}>\n                    <input id=\"item\" type=\"text\" value={text} placeholder=\"add task...\" value={text} onChange={this.props.taskChange} />\n                    <button type=\"submit\"  id=\"add\">\n                    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path className='fill' d='M16,8c0,0.5-0.5,1-1,1H9v6c0,0.5-0.5,1-1,1s-1-0.5-1-1V9H1C0.5,9,0,8.5,0,8s0.5-1,1-1h6V1c0-0.5,0.5-1,1-1s1,0.5,1,1v6h6C15.5,7,16,7.5,16,8z' /></svg>\n                    </button>\n                </form>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass TodoItem extends React.Component {\n\n    render() {\n        const {todos, id} = this.props;\n\n        return(\n            <ul className=\"todo\" id={id}>\n                 {todos}\n            </ul>\n        );\n    }\n}\n\nexport default TodoItem;","import React from 'react';\nimport TaskItem from './TaskItem';\n\nclass Tasks extends React.Component {\n    render() {\n        const { todoItem, completeItem } = this.props;\n\n        return (\n            <div className=\"container\">\n                <TaskItem todos={todoItem} id='todo'  />\n                <TaskItem todos={completeItem} id='completed' />\n            </div>\n        );\n    }\n}\n\nexport default Tasks;","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      currentItem: {text: '', key: ''},\n      todos: [],\n      completed: []\n    };\n\n  }\n\n  componentDidMount() {\n    const stateItem = localStorage.getItem('todoList');\n    console.log(stateItem);\n\n    if (stateItem) {\n      const stateJson = JSON.parse(stateItem);\n      this.setState({\n        todos: stateJson.todos,\n        completed: stateJson.completed\n      });\n    }\n  }\n\n  addTask = e => {\n    e.preventDefault();\n\n    const newItem = this.state.currentItem;\n\n    if (newItem.text) {\n      const items = [...this.state.todos, newItem];\n      console.log(items);\n\n      this.setState({\n        todos: items,\n        currentItem: { text: '', key: '' }\n      });\n\n      localStorage.setItem('todoList', JSON.stringify(this.state));\n    }\n  }\n\n  handleTaskChange = e => {\n    e.preventDefault();\n    const { value } = e.target;\n    const currentItem = { text: value, key: Date.now() };\n\n    this.setState({\n      currentItem\n    });\n  }\n \n  createTasks = item => {\n    return (\n      <li key={item.key}>\n      {item.text}\n      <div className=\"buttons\">\n          <button className=\"remove\" onClick={() => this.removeTaskOrAddToCompleted(item, 'remove')}>\n            <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 22 22'>\n                <rect className='noFill' width='22' height='22' />\n                <path className='fill' d='M16.1,3.6h-1.9V3.3c0-1.3-1-2.3-2.3-2.3h-1.7C8.9,1,7.8,2,7.8,3.3v0.2H5.9c-1.3,0-2.3,1-2.3,2.3v1.3c0,0.5,0.4,0.9,0.9,1v10.5c0,1.3,1,2.3,2.3,2.3h8.5c1.3,0,2.3-1,2.3-2.3V8.2c0.5-0.1,0.9-0.5,0.9-1V5.9C18.4,4.6,17.4,3.6,16.1,3.6z M9.1,3.3c0-0.6,0.5-1.1,1.1-1.1h1.7c0.6,0,1.1,0.5,1.1,1.1v0.2H9.1V3.3z M16.3,18.7c0,0.6-0.5,1.1-1.1,1.1H6.7c-0.6,0-1.1-0.5-1.1-1.1V8.2h10.6V18.7z M17.2,7H4.8V5.9c0-0.6,0.5-1.1,1.1-1.1h10.2c0.6,0,1.1,0.5,1.1,1.1V7z'/>\n                <path className='fill' d='M11,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8c0-0.4,0.3-0.6,0.6-0.6s0.6,0.3,0.6,0.6v6.8C11.6,17.7,11.4,18,11,18z'/>\n                <path className='fill' d='M8,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8c0-0.4,0.3-0.6,0.6-0.6c0.4,0,0.6,0.3,0.6,0.6v6.8C8.7,17.7,8.4,18,8,18z'/>\n                <path className='fill' d='M14,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8c0-0.4,0.3-0.6,0.6-0.6c0.4,0,0.6,0.3,0.6,0.6v6.8C14.6,17.7,14.3,18,14,18z'/>\n            </svg>       \n          </button>\n          <button className=\"complete\" onClick={() => this.removeTaskOrAddToCompleted(item, 'complete')}>\n              <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 22 22'>\n                <rect className='noFill' width='22' height='22' />\n                <path className='fill' d='M9.7,14.4L9.7,14.4c-0.2,0-0.4-0.1-0.5-0.2l-2.7-2.7c-0.3-0.3-0.3-0.8,0-1.1s0.8-0.3,1.1,0l2.1,2.1l4.8-4.8c0.3-0.3,0.8-0.3,1.1,0s0.3,0.8,0,1.1l-5.3,5.3C10.1,14.3,9.9,14.4,9.7,14.4z'/>\n              </svg>\n          </button>\n      </div>\n      </li>\n    );\n  }\n\n  createCompleted = item => {\n    return (\n      <li key={item.key}>\n      {item.text}\n      <div className=\"buttons\">\n          <button className=\"remove\" onClick={() => this.removeCompleted(item)}>\n            <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 22 22'>\n                <rect className='noFill' width='22' height='22' />\n                <path className='fill' d='M16.1,3.6h-1.9V3.3c0-1.3-1-2.3-2.3-2.3h-1.7C8.9,1,7.8,2,7.8,3.3v0.2H5.9c-1.3,0-2.3,1-2.3,2.3v1.3c0,0.5,0.4,0.9,0.9,1v10.5c0,1.3,1,2.3,2.3,2.3h8.5c1.3,0,2.3-1,2.3-2.3V8.2c0.5-0.1,0.9-0.5,0.9-1V5.9C18.4,4.6,17.4,3.6,16.1,3.6z M9.1,3.3c0-0.6,0.5-1.1,1.1-1.1h1.7c0.6,0,1.1,0.5,1.1,1.1v0.2H9.1V3.3z M16.3,18.7c0,0.6-0.5,1.1-1.1,1.1H6.7c-0.6,0-1.1-0.5-1.1-1.1V8.2h10.6V18.7z M17.2,7H4.8V5.9c0-0.6,0.5-1.1,1.1-1.1h10.2c0.6,0,1.1,0.5,1.1,1.1V7z'/>\n                <path className='fill' d='M11,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8c0-0.4,0.3-0.6,0.6-0.6s0.6,0.3,0.6,0.6v6.8C11.6,17.7,11.4,18,11,18z'/>\n                <path className='fill' d='M8,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8c0-0.4,0.3-0.6,0.6-0.6c0.4,0,0.6,0.3,0.6,0.6v6.8C8.7,17.7,8.4,18,8,18z'/>\n                <path className='fill' d='M14,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8c0-0.4,0.3-0.6,0.6-0.6c0.4,0,0.6,0.3,0.6,0.6v6.8C14.6,17.7,14.3,18,14,18z'/>\n            </svg>       \n          </button>\n          <button className=\"complete\" onClick={() => this.removeCompleted(item)}>\n              <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 22 22'>\n                <rect className='noFill' width='22' height='22' />\n                <path className='fill' d='M9.7,14.4L9.7,14.4c-0.2,0-0.4-0.1-0.5-0.2l-2.7-2.7c-0.3-0.3-0.3-0.8,0-1.1s0.8-0.3,1.1,0l2.1,2.1l4.8-4.8c0.3-0.3,0.8-0.3,1.1,0s0.3,0.8,0,1.1l-5.3,5.3C10.1,14.3,9.9,14.4,9.7,14.4z'/>\n              </svg>\n          </button>\n      </div>\n      </li>\n    );\n  }\n\n  removeCompleted = item => {\n    const filterItems = this.state.completed.filter(completed => {\n      return completed.key !== item.key\n    });\n\n    this.setState({\n      completed: filterItems\n    });\n  }\n\n  removeTaskOrAddToCompleted = (item, whatToDo) => {\n    \n      const filterItems = this.state.todos.filter(todo => {\n        return todo.key !== item.key\n      });\n\n      const completed = this.state.completed;\n      \n     if (whatToDo === 'complete') {\n        completed.push(item);\n      } \n\n    this.setState({\n      todos: filterItems,\n      completed: completed\n    });\n    \n    console.log(this.state);\n  }\n\n\n  render() {\n    const todos = this.state.todos;\n    const todoItem = todos.map(this.createTasks);\n\n    const completed = this.state.completed;\n    let completeItem;\n    if (completed) {\n      completeItem = completed.map(this.createCompleted);\n    }\n    \n      return (\n          <div>\n            <Header addTask={this.addTask} text={this.state.currentItem.text} taskChange={this.handleTaskChange}/>\n            <Tasks todoItem={todoItem} completeItem={completeItem} />\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}